==================== FEDERATIO MODULE - WEBPACK ====================

■ Code demo
	- có 4 app: ✓	
			+ Shell
			+ Angular-app
			+ React-app 
			+ Vue App
	- define 3 account users (login):
			+ login user1/user1   ->   hiển Angular-app trong Shell 			✓
			+ login user2/user2   ->   hiển React-app   trong Shell				✓
			+ login user2/user3   ->   hiển VueApp + AngularApp  trong Shell	✓
	- resue componet của app khác: share route/expose component
	- shell: load remote app đẩy vào 1 biến loader => dùng container và template để mode hiển thị ✓
	- 1 trang load 2-3 app: khác Framewok    		✓
	- demo Mỗi app được gán thành 1 component/template   ✓
	- meta data: loader.js
	- demo load module theo 2 cách:
		+ dynamic
		+ lazy loading
	
	# use dự án thực tế:2 use case:
			1. Widget là 1 component:
					- dễ, routing auto khó
					- bản chất load componet nên chạy trên độc lập và shell sẽ không giống nhau
					  ví dụ: layout sẽ ăn theo shell (load ở shell) hoặc app chạy độc lập
					  
					  # share component
					  # share module? 
						? từ module share có lấy được route không? chắc có =)
						? từ module có lấy được các component con không?
						=> có nên share toàn bộ module?
								hay chỉ share app con?
					  
			2. Widget là cả 1 app và routing:
					- nắm được code của app, ví dụ: ForRoot/ForChill
					- chưa có cách giải quyết: chưa load được html.index của app vào shell 
												> cách đã thử: expose module Root
												
		
					# share route:
						- expose route từ app con => app con nhiều path => trỏ tới nhiều component (app con)
							-> app cha gọi remote là dùng được tất
							   trong trường hợp app shell muốn gọi 1 app khác thông qua path "/{name_xxx}"
					
	
	# vấn đề / khó khăn
		- dynamic route:
			mô tả: click vào RouterLink trên app trong shell => path bị sai
			=> phương án:
				+ cách 1: 
				+ cách 2: 
		- ForRoot/ForChild
		- expose Root Module -> khong chay index.html (app con)
			=> chạy shell và chạy app con => không giống nhau: có thể layout bao ngoài!
			=> mọi thứ còn lại Ok
		- app shell phát triển song song
			vd: code header ở shell...
		- bê nguyên app angular sang => expose Route Root là OK (thiếu html.index)
		- 2 use case:
			+ Widget là 1 component.		
						-> dễ, routing auto khó
						-> bản chất load componet nên chạy trên độc lập và shell sẽ không giống nhau
							ví dụ: layout sẽ ăn theo shell (load ở shell) hoặc app chạy độc lập
			+ Widget là cả 1 app và routing:
						- nắm được code của app, ví dụ: ForRoot/ForChill
						- chưa có cách giải quyết: chưa load được html.index của app vào shell 
													> cách đã thử: expose module Root
		- lựa chọn thư viện:
			
	
	
	
	Module Federation: Module Federation là một tính năng của Webpack,
	cho phép bạn chia sẻ mã giữa các ứng dụng Angular hoặc giữa Angular và các ứng dụng khác như React hoặc Vue.
	Điều này cho phép bạn tạo ra các microfrontend độc lập mà sau đó có thể tích hợp vào ứng dụng lớn hơn.
		
		
		

■ State
	tài liệu: https://medium.com/sysco-labs/state-management-in-micro-frontends-ee273830f95f
	- Web-Storage: Cookies/LocalStorage/Session
	- State Management Service (Implementing a Shared API Utility)
	- Global State: Create exported functions
		+ Tạo ra một module hoặc một service để lưu trữ trạng thái toàn cục.
		+ Cả hai ứng dụng app1 và app2 đều có thể truy cập và cập nhật trạng thái này.
	- Sử dụng WebSocket hoặc Server-Sent Events (SSE)
	- Custom Event: 
		https://www.reddit.com/r/Angular2/comments/unvd7b/sharing_state_between_microfrontends/
	- Rxjs: 
		https://www.angulararchitects.io/en/blog/the-microfrontend-revolution-module-federation-in-webpack-5/
	- windows varible
	- EventBus
	# FAQ: 
		https://github.com/jherr/Module-Federation-FAQ
	# From: Anh Mai Trung Đức
		> cách 1: Share qua redux: vì redux rất phổ biến và dùng được với mọi framework
		> cách 2: State được lưu ở app-shell và pass down vào các component, app shell cung cấp 1 service để transfer data giữa các component
	
	=> shared dependencies, mục đích là vì mỗi app của chúng ta có thể dùng chung những package khác nhau, và không muốn chúng được load nhiều lần vào app-shell.


■ Route:
	- vấn đề:
		? loader 1 app vào shell -> routerLink bị lỗi do không có định nghĩa ở shell.
		? Shell tries to load remote module from wrong port ("cannot match any routes") => https://stackoverflow.com/questions/70939200/dynamic-routes-of-routemodule-when-using-module-federation-plugin
		? Lazy loading angular 17 not loading the child routes (https://stackoverflow.com/questions/78184566/lazy-loading-angular-17-not-loading-the-child-routes)
		=>  phương án:
					+ load static: app con expose Route -> shell nhận 
					+ đóng gói route module:
						> viết trong loader.ts
						> shell sẽ xử lý logic để load
		
	- Test các trường hợp:
					+ path: http:shell/xxx ==> load module remote
					+ shell chạy route app con
	

	- 4 ways for load Lodule remote: https://oskari.io/blog/dynamic-remotes-module-federation
		+ dynamic: 
			đọc code LoadModuleRemote, tham khảo:
				>
				>
				>
				>	
		+ khai báo trong config Federation


■ Thư viện hỗ trợ triển khai MFE federation phổ biến:
	1. @angular-builders/custom-webpack --> đơn giản
		+ tài liệu techcombank
		+ tài liệu github module-federation
	2. @angular-architects/module-federation --> custom sâu
	
	https://www.steffendielmann.com/2021/05/07/microfrontend-with-angular-and-webpack-module-federation/
	https://dzone.com/articles/personalize-your-angular-build-with-webpack


				
■ Nhận định:
- Mfe là 1 bài toán lớn
- State + route là phần nặng nhất mfe
- 
-


■ Link tài liệu:
-
-
-
-
-
-
				
				
				
				
				
				
				
				
				
Adding Custom Metadata to The Manifest				
				
				
				
				
■ 
★ 
✓

----------------
Docker
	- Docker desktop
	- Docker composer
	
chuẩn bị project: angular, vue,...

- tạo file docker compose: docker-compose.yml
	version: '3.8'
	services:
	  app-shell:
		ports:					// map từ container -> local
		  - "4200:4200"
		build:					
		  context: ./app-shell	// chi chinh folder
		  dockerfile: .DockerFile 	// 
	  vue-app:
		ports:
		  - "3000:3000"
		build:
		  context: ./vue-app
		  dockerfile: .DockerFile
		  
	? volume
	


.DockerFile

FROM  node:18-alpine  => image

WORKDIR /app		=> source build ở đây

COPY package*.json ./
RUN npm install

RUN npm install -g @angular/cli@13

COPY . .
CMD ["ng", "serve", "--host", "0.0.0.0"]


----------------
có nhiều cách chạy

cách 1: 
	// thường mode debug
	$ docker compose up 
						- d : không log
						
	// list các comtainer đang chạy
	$ docker compose ps 
	
	// sh
	$ docker compose 

	// tắt container
	
	// run build
	
	
	
	
	
	
	
	

==========================================================

1) Introduction

2) Micro-Frontend demo

3) Why Micro-Frontends?

4) Why Module Federation?

5) Asynchronous Loading (tải bất đồng bộ)
	- share	
		singleton
	- React Suspense
	

6) Error Handling
	- Error hànding
	- Nếu có lỗi trong module remote => hiển thị Box báo lỗi (code in mfe)
	

7) Server Setup:
	- create project server

8) Sharing Functions:
	Server:8080
		create funtion 
			getProduct()
			getProductById()
			
	Home:3001
		product.js 					-----> dùng để share function cho "shell" (expose product.js)
			+ getProductById()  	--> call api tới server
			+ getProduct()			--> call api tới server
			+ currency				--> format tiền 

9) Nomenclature : danh pháp
	- login jwt
	- addCart

10) Sever Cart Setup
	- setup server card
	

11) Sharing State
	- cài thêm rxjs: 
		theo dõi hành vi
		lưu trữ ghi chú, mà thông báo web hoặc json
		điều thú vị là không bị ràng buộc bởi framwork nào
		
	3. state ( authen token chẳng hạn) phải đc đồng bộ khi gọi link giữa các app với nhau?

12) Sharing the JWT

13) Sharing the Cart

14) State Sharing Alternatives

15) Finishing the Cart

16) Cross-Platform Micro-Frontends

17) Micro-Frontend Routing

18) Unit Testing

19) End-To-End Testing

20) What's Next?

-- thứ 7---
luồng login

------ ngày mai ------
- xem nốt khóa học
- routing:
	+ architects/module-federation
- state:
	+ lưu localstorage | api
	








# load module?
	- không làm theo importsm nà sẽ dynamic import:
		Follow
			b1: tạo script
			b2: đọc thông tin module đc load từ thẻ script kia.
		=> control cao hơn, khai báo remote là hard code, không thể thay đối sau khi build
		
		Vì sao?
			- Tính linh hoạt cao: Bạn có thể tải các module từ các ứng dụng Microfrontend khác nhau vào ứng dụng hiện tại một cách linh hoạt và dễ dàng.
			- Tăng hiệu suất: Dynamic import cho phép tải các module cần thiết tại thời điểm cần thiết, giúp tăng hiệu suất và giảm thời gian load của ứng dụng.
			- Mở rộng dễ dàng: Kỹ thuật này làm cho việc mở rộng ứng dụng dễ dàng hơn bằng cách thêm mới các module từ các ứng dụng Microfrontend khác mà không làm ảnh hưởng đến cấu trúc hiện tại của ứng dụng.
			- Kiểm soát tốt hơn:
			
----------------
Hi anh, em có tìm hiểu 2 cách load module hôm nọ ae trao đổi, e note vài ý trả lời câu hỏi 2 cách khác gì nhau, 

- cách 1: dùng "remotes" option của Federation plugin
- cách 2: dynamic import (dùng code, input là tham số app remote)
			
----------------
Tại sao nên chọn cách 2?
- control cao hơn, cách khai báo "remotes" là hard code và ko thay đổi được sau khi build

- tăng hiệu suất: chỉ khi nào dùng thì tải module -> giảm time load

- tính linh hoạt cao, mở rộng dễ dàng, được hỗ trợ chính thức



-- link tham khảo & tài liệu:
- 4 cách & tại sao nên sử dụng Dynamic Remotes: https://oskari.io/blog/dynamic-remotes-module-federation

- Webpack docs: https://webpack.js.org/concepts/module-federation/#dynamic-remote-containers

- source exampe, nhiều case hay gặp => có thể tham khảo để build base project: https://github.com/module-federation/module-federation-examples

- webpack 5 Module Federation with Angular and the Angular Router + Dynaic loadModule (angulararchitects): https://github.com/manfredsteyer/module-federation-with-angular-dynamic/tree/master



============ ROUTE ============
Anh ơi, về chủ đề Route, em có tham khảo docs & source của angualar-architecture, e note lại nhận định cá nhân:
- họ mô tả và cách dùng khá dễ hiểu.
- sử dụng lib @angular-architect (Federation official cũng dùng để demo) 


- link: Dynamically Creating Routes https://www.angulararchitects.io/en/blog/dynamic-module-federation-with-angular/
- source code: https://github.com/manfredsteyer/module-federation-with-angular-dynamic/tree/simple


# Ý tưởng:
- app shell: 
+ có option của thư viện định nghĩa path (routePath: string) => mỗi "path" ứng với 1 module
+ Code logic tự động thêm Route vào module chính (return [...APP_ROUTES, ...lazyRoutes])


=> điều kiện: routePath (config ở shell) phải trùng với path trỏ vào module (app con)
ví dụ:
- app con: path = "user" -> load module USER (webpack expose USER)
- app shell: load remote module USER thì set RoutePath = "user"


=> coi AppShell ngang tương đương cấp cha của module remote (app con), thiên về build cấu trúc dự án.
=> đã đạt được tôn chỉ: shell và app mfe có thể phát triển riêng biệt.


Tuy nhiên: trường hợp trong remote module có RouterLink được định nghĩa ở 1 module khác (app con) => shell không load được, vì module định nghĩa path không được load ở shell.
=> trường hợp này App chạy độc lập thì Ok, dễ hiểu bởi vì chạy độc lập sẽ load toàn bộ dự án con.
=> đây là điều hiển nhiên.


Theo em thấy thiết kế này 80-90% cũng sẽ hoạt động với cả Reach và Vue không cần custom gì thêm, em chưa demo nên chưa chắc chắn 100%
(demo Vue và React load vào Shell (Angular) e đã demo cho anh xem)

--------------
# các app con Link sang nhau có được không?
-> CÓ, hoạt động rất bình thường với điều kiện module app2 cũng phải được load vào shell (đã demo)

# vấn đề mà app con và app shell có thể hiển thị KHÔNG giống nhau 
theo nguyên lý đúng là như vậy, theo em hiểu thì:
+ app con độc lập: load Toàn bộ Module, module cha chính là Parent
+ được load ở Shell => Shell là parent -> chỉ hiển thị Component app con
=> 2 parent khác nhau thì không thể giống nhau, đây là vấn đề của Angular
======== STATE ========

Có, có nhiều thư viện và framework có thể được sử dụng để triển khai event bus trong ứng dụng của bạn. Ví dụ, trong môi trường JavaScript/TypeScript, bạn có thể sử dụng các thư viện như:

- EventEmitter: Là một module có sẵn trong Node.js cho phép truyền dữ liệu giữa các thành phần của ứng dụng thông qua các sự kiện. Bạn có thể sử dụng nó để triển khai event bus.
- Vue.js EventBus: Vue.js cung cấp một chức năng EventBus sẵn có cho việc giao tiếp giữa các thành phần trong ứng dụng Vue.
- Redux: Redux là một thư viện quản lý trạng thái cho ứng dụng JavaScript. Bạn có thể sử dụng nó như một event bus để gửi và nhận các action giữa các thành phần.
- RxJS Subjects: RxJS là một thư viện cho việc lập trình bất đồng bộ trong JavaScript. Bạn có thể sử dụng RxJS Subjects để triển khai một event bus cho ứng dụng của bạn.
- EventBus trong các framework như Angular và React: Cả Angular và React đều có cơ chế giao tiếp giữa các thành phần thông qua các event bus tùy chỉnh.

============ STATE ============
3. state (authen token chẳng hạn) phải đc đồng bộ khi gọi link giữa các app với nhau
- case:
	+ mfe : tạo file serivce.ts
		> import rxjs
		> expose file service này => hoặc nghiên cứu đưa vào loader.ts hoặc expose cùng module	
		> dữ liệu thì hard code đoạn text 
			-> ok thì chuyển qua input html
		> có console log để check xem thay đổi từ app thì bên này có thay đổi theo không
		
	+ shell:
		> import service từ app
		> hiển thị data: sử dụng console log
	
=> TRIỂN
		
		
	